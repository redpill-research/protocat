syntax = "proto3";

import "models.proto";

package api;

// desc: Auth service
service WalletAuthService {
    /**
        path: /api/v1/auth/start
        description: Start logic process
        method: POST
        version: v1
        auth: false
    */
    rpc AuthStart(AuthStartRequest) returns (AuthStartResponse) {}

    /**
        path: /api/v1/auth/confirm
        description: Confirm login process
        method: POST
        version: v1
        auth: false
    */
    rpc AuthConfirm(AuthConfirmRequest) returns (AuthConfirmResponse) {}
}

message AuthStartRequest {
    string address = 1;
    optional string ref_code = 2;
}

message AuthStartResponse {
    string auth_id = 1;
    string message_for_sign = 2;
}

message AuthConfirmRequest {
    string auth_id = 1;
    string signature = 2;
}

message AuthConfirmResponse {
    string session_token = 1;
}

// desc: Country service
service CountryService {
    /**
        path: /api/v1/countries
        description: Get countries list
        method: POST
        version: v1
        auth: true
    */
    rpc GetCountries(GetCountriesRequest) returns (GetCountriesResponse) {}
}

message GetCountriesRequest {}

message GetCountriesResponse {
    repeated models.Country countries = 1;
    models.Country preferred_country = 2;
}

// desc: Products service
service ProductsService {
    /**
        @path: /api/v1/products
        @description: Get products list by country
        @method: POST
        @version: v1
        @auth: true
    */
    rpc GetProductsByCountry(GetProductsByCountryRequest) returns (GetProductsByCountryResponse) {}

    /**
        @path: /api/v1/products/by_id
        @description: Get product by id
        @method: POST
        @version: v1
        @auth: true
    */
    rpc GetProductById(GetProductByIdRequest) returns (GetProductByIdResponse) {}

    /**
        @path: /api/v1/products/search
        @description: Search products by name and country
        @method: POST
        @version: v1
        @auth: true
    */
    rpc SearchProducts(SearchProductsRequest) returns (SearchProductsResponse) {}
}

message GetProductsByCountryRequest {
    /**
        @description: country of products
        @required: true
    */
    string country_id = 1;
    int32 page = 2;
    int32 limit = 3;
}

message GetProductsByCountryResponse {
    repeated models.Product products = 1;
    int32 total = 2;
}

message GetProductByIdRequest {
    string product_id = 1;
}

message GetProductByIdResponse {
    models.Product product = 1;
    models.Country product_country = 2;
}

message SearchProductsRequest {
    /**
        @description: country of products
        @required: true
    */
    string country_id = 1;
    /**
        @description: name of products
        @required: true
    */
    string name = 2;

    optional int32 page = 3;
    optional int32 limit = 4;
}

message SearchProductsResponse {
    repeated models.Product products = 1;
    int32 total = 2;
}

service OrdersService {
    /**
        path: /api/v1/orders/create
        description: Create order
        method: POST
        version: v1
        auth: true
    */
    rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse) {}

    /**
        path: /api/v1/orders/by_id
        description: Create order
        method: POST
        version: v1
        auth: true
    */
    rpc GetOrderById(GetOrderByIdRequest) returns (GetOrderByIdResponse) {}

    /**
        path: /api/v1/orders/all
        description: Create order
        method: POST
        version: v1
        auth: true
    */
    rpc GetAllOrders(GetAllOrdersRequest) returns (GetAllOrdersResponse) {}
}

message CreateOrderRequest {
    string product_id = 1;
    double product_denomination = 2;
}

message CreateOrderResponse {
    models.Order order = 1;
}

message GetOrderByIdRequest {
    string order_id = 1;
}

message GetOrderByIdResponse {
    models.Order order = 1;
}

message GetAllOrdersRequest {
    int32 page = 1;
    int32 limit = 2;
}

message GetAllOrdersResponse {
    repeated models.Order orders = 1;
    int32 total = 2;
}

// desc: Referral system service
service ReferralService {
    /**
        path: /api/v1/referral/info
        description: Get referral info
        method: POST
        version: v1
        auth: true
    */
    rpc GetReferralInfo(GetReferralInfoRequest) returns (GetReferralInfoResponse) {}

    /**
        path: /api/v1/referral/send_invite
        description: send invite
        method: POST
        version: v1
        auth: true
    */
    rpc SendInvite(SendInviteRequest) returns (SendInviteResponse) {}

    /**
        path: /api/v1/referral/generate_code
        description: Generate invite code
        method: POST
        version: v1
        auth: true
    */
    rpc GenerateInviteCode(GenerateInviteCodeRequest) returns (GenerateInviteCodeResponse) {}
}

message GetReferralInfoRequest {}

message GetReferralInfoResponse {
    int32 available_count = 1;
    repeated models.InviteCode generated_codes = 2;
    repeated string invited_addresses = 3;
}

message SendInviteRequest {
    string address = 1;
}

message SendInviteResponse {
    string tx = 1;
    string url = 2;
}

message GenerateInviteCodeRequest {}

message GenerateInviteCodeResponse {
    string code = 1;
}
