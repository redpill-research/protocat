// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file socket.proto (package atlas.socket.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum atlas.socket.v1.SocketEventType
 */
export enum SocketEventType {
  /**
   * @generated from enum value: SOCKET_EVENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * service mesaages
   *
   * @generated from enum value: SOCKET_EVENT_TYPE_CONNECT = 1;
   */
  CONNECT = 1,

  /**
   * @generated from enum value: SOCKET_EVENT_TYPE_DISCONNECT = 2;
   */
  DISCONNECT = 2,

  /**
   * @generated from enum value: SOCKET_EVENT_TYPE_PING = 3;
   */
  PING = 3,

  /**
   * purchase messages
   *
   * @generated from enum value: SOCKET_EVENT_TYPE_PURCHASE_RESULT = 4;
   */
  PURCHASE_RESULT = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(SocketEventType)
proto3.util.setEnumType(SocketEventType, "atlas.socket.v1.SocketEventType", [
  { no: 0, name: "SOCKET_EVENT_TYPE_UNSPECIFIED" },
  { no: 1, name: "SOCKET_EVENT_TYPE_CONNECT" },
  { no: 2, name: "SOCKET_EVENT_TYPE_DISCONNECT" },
  { no: 3, name: "SOCKET_EVENT_TYPE_PING" },
  { no: 4, name: "SOCKET_EVENT_TYPE_PURCHASE_RESULT" },
]);

/**
 * @generated from message atlas.socket.v1.SocketEvent
 */
export class SocketEvent extends Message<SocketEvent> {
  /**
   * any message_data = 2;
   *
   * @generated from field: atlas.socket.v1.SocketEventType event_type = 1;
   */
  eventType = SocketEventType.UNSPECIFIED;

  constructor(data?: PartialMessage<SocketEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.socket.v1.SocketEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_type", kind: "enum", T: proto3.getEnumType(SocketEventType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SocketEvent {
    return new SocketEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SocketEvent {
    return new SocketEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SocketEvent {
    return new SocketEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SocketEvent | PlainMessage<SocketEvent> | undefined, b: SocketEvent | PlainMessage<SocketEvent> | undefined): boolean {
    return proto3.util.equals(SocketEvent, a, b);
  }
}

