// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api.proto (package atlas.api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { InviteCode, Product } from "./models_pb.js";

/**
 * @generated from message atlas.api.v1.LoginStartRequest
 */
export class LoginStartRequest extends Message<LoginStartRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<LoginStartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.LoginStartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginStartRequest {
    return new LoginStartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginStartRequest {
    return new LoginStartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginStartRequest {
    return new LoginStartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginStartRequest | PlainMessage<LoginStartRequest> | undefined, b: LoginStartRequest | PlainMessage<LoginStartRequest> | undefined): boolean {
    return proto3.util.equals(LoginStartRequest, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.LoginStartResponse
 */
export class LoginStartResponse extends Message<LoginStartResponse> {
  /**
   * @generated from field: string message_for_sign = 1;
   */
  messageForSign = "";

  constructor(data?: PartialMessage<LoginStartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.LoginStartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_for_sign", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginStartResponse {
    return new LoginStartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginStartResponse {
    return new LoginStartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginStartResponse {
    return new LoginStartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginStartResponse | PlainMessage<LoginStartResponse> | undefined, b: LoginStartResponse | PlainMessage<LoginStartResponse> | undefined): boolean {
    return proto3.util.equals(LoginStartResponse, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.LoginFinishRequest
 */
export class LoginFinishRequest extends Message<LoginFinishRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string signature = 2;
   */
  signature = "";

  constructor(data?: PartialMessage<LoginFinishRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.LoginFinishRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginFinishRequest {
    return new LoginFinishRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginFinishRequest {
    return new LoginFinishRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginFinishRequest {
    return new LoginFinishRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginFinishRequest | PlainMessage<LoginFinishRequest> | undefined, b: LoginFinishRequest | PlainMessage<LoginFinishRequest> | undefined): boolean {
    return proto3.util.equals(LoginFinishRequest, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.LoginFinishResponse
 */
export class LoginFinishResponse extends Message<LoginFinishResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string nonce = 3;
   */
  nonce = "";

  constructor(data?: PartialMessage<LoginFinishResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.LoginFinishResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nonce", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginFinishResponse {
    return new LoginFinishResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginFinishResponse {
    return new LoginFinishResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginFinishResponse {
    return new LoginFinishResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginFinishResponse | PlainMessage<LoginFinishResponse> | undefined, b: LoginFinishResponse | PlainMessage<LoginFinishResponse> | undefined): boolean {
    return proto3.util.equals(LoginFinishResponse, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.LogoutRequest
 */
export class LogoutRequest extends Message<LogoutRequest> {
  constructor(data?: PartialMessage<LogoutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.LogoutRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogoutRequest {
    return new LogoutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogoutRequest {
    return new LogoutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogoutRequest {
    return new LogoutRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LogoutRequest | PlainMessage<LogoutRequest> | undefined, b: LogoutRequest | PlainMessage<LogoutRequest> | undefined): boolean {
    return proto3.util.equals(LogoutRequest, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.LogoutResponse
 */
export class LogoutResponse extends Message<LogoutResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<LogoutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.LogoutResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogoutResponse {
    return new LogoutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogoutResponse {
    return new LogoutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogoutResponse {
    return new LogoutResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LogoutResponse | PlainMessage<LogoutResponse> | undefined, b: LogoutResponse | PlainMessage<LogoutResponse> | undefined): boolean {
    return proto3.util.equals(LogoutResponse, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.GetCountriesRequest
 */
export class GetCountriesRequest extends Message<GetCountriesRequest> {
  constructor(data?: PartialMessage<GetCountriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.GetCountriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCountriesRequest {
    return new GetCountriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCountriesRequest {
    return new GetCountriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCountriesRequest {
    return new GetCountriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCountriesRequest | PlainMessage<GetCountriesRequest> | undefined, b: GetCountriesRequest | PlainMessage<GetCountriesRequest> | undefined): boolean {
    return proto3.util.equals(GetCountriesRequest, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.GetCountriesResponse
 */
export class GetCountriesResponse extends Message<GetCountriesResponse> {
  /**
   * @generated from field: repeated string countries = 1;
   */
  countries: string[] = [];

  constructor(data?: PartialMessage<GetCountriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.GetCountriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "countries", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCountriesResponse {
    return new GetCountriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCountriesResponse {
    return new GetCountriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCountriesResponse {
    return new GetCountriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCountriesResponse | PlainMessage<GetCountriesResponse> | undefined, b: GetCountriesResponse | PlainMessage<GetCountriesResponse> | undefined): boolean {
    return proto3.util.equals(GetCountriesResponse, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.GetProductsByCountryRequest
 */
export class GetProductsByCountryRequest extends Message<GetProductsByCountryRequest> {
  /**
   * *
   * @description: country of products
   * @required: true
   *
   * @generated from field: string country = 1;
   */
  country = "";

  constructor(data?: PartialMessage<GetProductsByCountryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.GetProductsByCountryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductsByCountryRequest {
    return new GetProductsByCountryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductsByCountryRequest {
    return new GetProductsByCountryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductsByCountryRequest {
    return new GetProductsByCountryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductsByCountryRequest | PlainMessage<GetProductsByCountryRequest> | undefined, b: GetProductsByCountryRequest | PlainMessage<GetProductsByCountryRequest> | undefined): boolean {
    return proto3.util.equals(GetProductsByCountryRequest, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.GetProductsByCountryResponse
 */
export class GetProductsByCountryResponse extends Message<GetProductsByCountryResponse> {
  /**
   * @generated from field: repeated atlas.models.v1.Product products = 1;
   */
  products: Product[] = [];

  constructor(data?: PartialMessage<GetProductsByCountryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.GetProductsByCountryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "products", kind: "message", T: Product, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductsByCountryResponse {
    return new GetProductsByCountryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductsByCountryResponse {
    return new GetProductsByCountryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductsByCountryResponse {
    return new GetProductsByCountryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductsByCountryResponse | PlainMessage<GetProductsByCountryResponse> | undefined, b: GetProductsByCountryResponse | PlainMessage<GetProductsByCountryResponse> | undefined): boolean {
    return proto3.util.equals(GetProductsByCountryResponse, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.PurchaseProductRequest
 */
export class PurchaseProductRequest extends Message<PurchaseProductRequest> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: string country = 2;
   */
  country = "";

  /**
   * @generated from field: int64 product_denomination = 3;
   */
  productDenomination = protoInt64.zero;

  constructor(data?: PartialMessage<PurchaseProductRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.PurchaseProductRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "product_denomination", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchaseProductRequest {
    return new PurchaseProductRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchaseProductRequest {
    return new PurchaseProductRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchaseProductRequest {
    return new PurchaseProductRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PurchaseProductRequest | PlainMessage<PurchaseProductRequest> | undefined, b: PurchaseProductRequest | PlainMessage<PurchaseProductRequest> | undefined): boolean {
    return proto3.util.equals(PurchaseProductRequest, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.PurchaseProductResponse
 */
export class PurchaseProductResponse extends Message<PurchaseProductResponse> {
  /**
   * @generated from field: string wallet = 1;
   */
  wallet = "";

  /**
   * @generated from field: string amount = 2;
   */
  amount = "";

  /**
   * @generated from field: string memo = 3;
   */
  memo = "";

  /**
   * @generated from field: string purchase_id = 4;
   */
  purchaseId = "";

  constructor(data?: PartialMessage<PurchaseProductResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.PurchaseProductResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "wallet", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "purchase_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurchaseProductResponse {
    return new PurchaseProductResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurchaseProductResponse {
    return new PurchaseProductResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurchaseProductResponse {
    return new PurchaseProductResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PurchaseProductResponse | PlainMessage<PurchaseProductResponse> | undefined, b: PurchaseProductResponse | PlainMessage<PurchaseProductResponse> | undefined): boolean {
    return proto3.util.equals(PurchaseProductResponse, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.GetReferralInfoRequest
 */
export class GetReferralInfoRequest extends Message<GetReferralInfoRequest> {
  constructor(data?: PartialMessage<GetReferralInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.GetReferralInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReferralInfoRequest {
    return new GetReferralInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReferralInfoRequest {
    return new GetReferralInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReferralInfoRequest {
    return new GetReferralInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetReferralInfoRequest | PlainMessage<GetReferralInfoRequest> | undefined, b: GetReferralInfoRequest | PlainMessage<GetReferralInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetReferralInfoRequest, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.GetReferralInfoResponse
 */
export class GetReferralInfoResponse extends Message<GetReferralInfoResponse> {
  /**
   * @generated from field: int32 avalible_count = 1;
   */
  avalibleCount = 0;

  /**
   * @generated from field: repeated atlas.models.v1.InviteCode generated_codes = 2;
   */
  generatedCodes: InviteCode[] = [];

  /**
   * @generated from field: repeated string invited_addresses = 3;
   */
  invitedAddresses: string[] = [];

  constructor(data?: PartialMessage<GetReferralInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.GetReferralInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "avalible_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "generated_codes", kind: "message", T: InviteCode, repeated: true },
    { no: 3, name: "invited_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReferralInfoResponse {
    return new GetReferralInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReferralInfoResponse {
    return new GetReferralInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReferralInfoResponse {
    return new GetReferralInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetReferralInfoResponse | PlainMessage<GetReferralInfoResponse> | undefined, b: GetReferralInfoResponse | PlainMessage<GetReferralInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetReferralInfoResponse, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.SendInviteRequest
 */
export class SendInviteRequest extends Message<SendInviteRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<SendInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.SendInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendInviteRequest {
    return new SendInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendInviteRequest {
    return new SendInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendInviteRequest {
    return new SendInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendInviteRequest | PlainMessage<SendInviteRequest> | undefined, b: SendInviteRequest | PlainMessage<SendInviteRequest> | undefined): boolean {
    return proto3.util.equals(SendInviteRequest, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.SendInviteResponse
 */
export class SendInviteResponse extends Message<SendInviteResponse> {
  /**
   * @generated from field: string tx = 1;
   */
  tx = "";

  constructor(data?: PartialMessage<SendInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.SendInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendInviteResponse {
    return new SendInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendInviteResponse {
    return new SendInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendInviteResponse {
    return new SendInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendInviteResponse | PlainMessage<SendInviteResponse> | undefined, b: SendInviteResponse | PlainMessage<SendInviteResponse> | undefined): boolean {
    return proto3.util.equals(SendInviteResponse, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.GenerateInviteCodeRequest
 */
export class GenerateInviteCodeRequest extends Message<GenerateInviteCodeRequest> {
  constructor(data?: PartialMessage<GenerateInviteCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.GenerateInviteCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateInviteCodeRequest {
    return new GenerateInviteCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateInviteCodeRequest {
    return new GenerateInviteCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateInviteCodeRequest {
    return new GenerateInviteCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateInviteCodeRequest | PlainMessage<GenerateInviteCodeRequest> | undefined, b: GenerateInviteCodeRequest | PlainMessage<GenerateInviteCodeRequest> | undefined): boolean {
    return proto3.util.equals(GenerateInviteCodeRequest, a, b);
  }
}

/**
 * @generated from message atlas.api.v1.GenerateInviteCodeResponse
 */
export class GenerateInviteCodeResponse extends Message<GenerateInviteCodeResponse> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  constructor(data?: PartialMessage<GenerateInviteCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "atlas.api.v1.GenerateInviteCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateInviteCodeResponse {
    return new GenerateInviteCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateInviteCodeResponse {
    return new GenerateInviteCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateInviteCodeResponse {
    return new GenerateInviteCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateInviteCodeResponse | PlainMessage<GenerateInviteCodeResponse> | undefined, b: GenerateInviteCodeResponse | PlainMessage<GenerateInviteCodeResponse> | undefined): boolean {
    return proto3.util.equals(GenerateInviteCodeResponse, a, b);
  }
}

